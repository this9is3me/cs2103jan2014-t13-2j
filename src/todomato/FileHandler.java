package todomato;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

/**
 * This class reads, writes, and updates a local data file stored
 * on the user's computer. It reads in tasks as Task objects.
 * @author Yiwen
 *
 */

public class FileHandler {
	
	private static final String LINE_BREAK = "\r\n";
	private String fileLocation;
	private File file;
	
	/**
	 * @param fileLoc
	 */
	public FileHandler (String fileLoc) {
		this.fileLocation = fileLoc;
		this.file = createNewFileWhenNotExist(new File (fileLocation));
		System.out.println(file);
		
	}
	
	public File createNewFileWhenNotExist (File f) {
		File dataFile = f;
		if(!f.exists()) {
			try {
				FileWriter fw = new FileWriter(f.getAbsoluteFile());
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return dataFile;
	}

	/**
	 * @return a task list generated by strings in the data file
	 * @throws IOException
	 */
	public TaskDTList readFile() {
		
		try {
		
			String currentLine;
			TaskDT currentTask;
			TaskDTList taskList = new TaskDTList();
			System.out.println(file.getAbsoluteFile());
			BufferedReader bufferedReader = new BufferedReader(new FileReader(file.getAbsoluteFile()));
			
			while ((currentLine = bufferedReader.readLine()) != null) {
				currentTask = readTask(currentLine);
				taskList.addToList(currentTask);
			}
			
			bufferedReader.close();
			return taskList;
			
		} catch (IOException e) {
			//TODO
			return null;
			
		}
			
			
	}
	
	/**
	 * @param taskList the updated task list stored in runtime
	 * @return the updated task list generated by strings in the date file
	 * @throws IOException
	 */
	public TaskDTList updateFile(TaskDTList taskList) {
		
		try {
		
			String content;
			
			FileWriter fileWriter = new FileWriter(file.getAbsoluteFile());
			BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);
			
	
			if (!file.exists()) {
				file.createNewFile();
			}
			
			for (TaskDT task : taskList.getList()) {
				content = task.toString() + LINE_BREAK;
				bufferedWriter.write(content);
			}
	
			bufferedWriter.close();
			
			TaskDTList updatedList = readFile();
			
			
			return updatedList;
		
		} catch (IOException e) {
			
			//TODO
			return null;
			
		}
	}
	
	/**
	 * @param line each line in data file that represents a task
	 * @return task generated by the input line
	 */
	private TaskDT readTask(String line) {
		TaskDT task = null;
		try {
			task = TaskDT.createTaskFromString(line);
		} catch (InvalidInputException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return task;
	}
	
	
}
